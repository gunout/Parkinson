import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from matplotlib.patches import Circle, Rectangle
import warnings
warnings.filterwarnings('ignore')

class ParkinsonGenomeAnalyzer:
    def __init__(self):
        self.colors = {'A': '#FF6B6B', 'T': '#4ECDC4', 'C': '#45B7D1', 'G': '#F9A602'}
        self.genes_parkinson = ['SNCA', 'LRRK2', 'PARK2', 'PINK1', 'DJ1', 'GBA', 'VPS35', 'ATP13A2']
        
    def generate_genomic_data(self):
        """G√©n√®re des donn√©es g√©nomiques simul√©es pour la maladie de Parkinson"""
        print("üß¨ G√©n√©ration des donn√©es g√©nomiques de la maladie de Parkinson...")
        
        # Mutations communes dans la maladie de Parkinson
        mutations_data = {
            'Gene': self.genes_parkinson + ['UCHL1', 'HTRA2', 'PLA2G6', 'FBXO7', 'DNAJC6', 'SYNJ1'],
            'Mutation_Frequency': [0.15, 0.12, 0.08, 0.06, 0.05, 0.10, 0.04, 0.03, 
                                  0.02, 0.02, 0.03, 0.02, 0.02, 0.01],
            'Mutation_Type': ['Missense', 'Missense', 'Deletion', 'Missense', 'Deletion', 
                            'Missense', 'Missense', 'Missense', 'Missense', 'Missense',
                            'Missense', 'Missense', 'Missense', 'Frameshift'],
            'Clinical_Significance': ['Pathogenic', 'Pathogenic', 'Pathogenic', 'Pathogenic',
                                    'Pathogenic', 'Risk_Factor', 'Pathogenic', 'Pathogenic',
                                    'Pathogenic', 'Pathogenic', 'Pathogenic', 'Pathogenic',
                                    'Pathogenic', 'Pathogenic']
        }
        
        return pd.DataFrame(mutations_data)
    
    def create_ctag_diagram(self, df):
        """Cr√©e un diagramme CTAG pour visualiser les mutations"""
        plt.style.use('seaborn-v0_8')
        fig, ((ax1, ax2), (ax3, ax4)) = plt.subplots(2, 2, figsize=(20, 16))
        
        # 1. Fr√©quence des mutations par g√®ne
        self._plot_mutation_frequency(df, ax1)
        
        # 2. R√©partition des types de mutations
        self._plot_mutation_types(df, ax2)
        
        # 3. Diagramme CTAG sequence
        self._plot_ctag_sequence(ax3)
        
        # 4. Impact clinique
        self._plot_clinical_impact(df, ax4)
        
        plt.suptitle('Analyse G√©nomique de la Maladie de Parkinson - Diagramme CTAG', 
                    fontsize=16, fontweight='bold')
        plt.tight_layout()
        plt.savefig('parkinson_ctag_diagram.png', dpi=300, bbox_inches='tight')
        plt.show()
        
        # G√©n√©rer le rapport d'analyse
        self._generate_genomic_report(df)
    
    def _plot_mutation_frequency(self, df, ax):
        """Plot de la fr√©quence des mutations par g√®ne"""
        colors = ['#FF6B6B' if gene in ['SNCA', 'LRRK2', 'PARK2'] else '#45B7D1' for gene in df['Gene']]
        
        bars = ax.barh(df['Gene'], df['Mutation_Frequency']*100, 
                      color=colors, alpha=0.8)
        
        # Ajouter les valeurs sur les barres
        for bar in bars:
            width = bar.get_width()
            ax.text(width + 0.5, bar.get_y() + bar.get_height()/2, 
                   f'{width:.1f}%', ha='left', va='center', fontweight='bold', fontsize=9)
        
        ax.set_xlabel('Fr√©quence des Mutations (%)')
        ax.set_title('Fr√©quence des Mutations par G√®ne\n dans la Maladie de Parkinson', 
                    fontsize=12, fontweight='bold')
        ax.grid(True, alpha=0.3, axis='x')
    
    def _plot_mutation_types(self, df, ax):
        """Plot de la r√©partition des types de mutations"""
        mutation_counts = df['Mutation_Type'].value_counts()
        
        colors = ['#FF6B6B', '#4ECDC4', '#45B7D1', '#F9A602', '#6A0572', '#2A9D8F']
        wedges, texts, autotexts = ax.pie(mutation_counts.values, 
                                         labels=mutation_counts.index,
                                         colors=colors[:len(mutation_counts)],
                                         autopct='%1.1f%%',
                                         startangle=90)
        
        for autotext in autotexts:
            autotext.set_color('white')
            autotext.set_fontweight('bold')
        
        ax.set_title('R√©partition des Types de Mutations', 
                    fontsize=12, fontweight='bold')
    
    def _plot_ctag_sequence(self, ax):
        """Cr√©e un diagramme CTAG sequence"""
        # S√©quence simul√©e avec mutations sp√©cifiques √† Parkinson
        sequence = "ATGCTAGCTAGCTAGCTAGCTAGCTAGCTAGCTAGCTAGCTAGCTAGCTAGCTAGCTAGC"
        mutations = [8, 15, 22, 30, 42]  # positions de mutations
        
        ax.set_xlim(0, len(sequence))
        ax.set_ylim(0, 2)
        
        # Dessiner la s√©quence de base
        for i, base in enumerate(sequence):
            color = self.colors[base]
            rect = Rectangle((i, 0.8), 1, 0.4, facecolor=color, alpha=0.7, edgecolor='black')
            ax.add_patch(rect)
            ax.text(i + 0.5, 1, base, ha='center', va='center', 
                   fontweight='bold', fontsize=8)
        
        # Marquer les mutations
        for mut_pos in mutations:
            circle = Circle((mut_pos + 0.5, 1.6), 0.3, 
                          facecolor='#8B4513', alpha=0.8, edgecolor='#654321')  # Marron pour Parkinson
            ax.add_patch(circle)
            ax.text(mut_pos + 0.5, 1.6, 'M', ha='center', va='center', 
                   fontweight='bold', color='white', fontsize=8)
        
        ax.set_title('Diagramme CTAG - S√©quence G√©nomique avec Mutations Parkinson', 
                    fontsize=12, fontweight='bold')
        ax.set_xlabel('Position dans la s√©quence')
        ax.set_ylabel('')
        ax.set_yticks([])
        ax.grid(True, alpha=0.3)
    
    def _plot_clinical_impact(self, df, ax):
        """Plot de l'impact clinique des mutations"""
        clinical_counts = df['Clinical_Significance'].value_counts()
        
        colors = ['#E76F51', '#2A9D8F', '#F9A602']
        bars = ax.bar(clinical_counts.index, clinical_counts.values, 
                     color=colors[:len(clinical_counts)], alpha=0.8)
        
        # Ajouter les valeurs sur les barres
        for bar in bars:
            height = bar.get_height()
            ax.text(bar.get_x() + bar.get_width()/2, height + 0.1,
                   f'{height}', ha='center', va='bottom', fontweight='bold')
        
        ax.set_ylabel('Nombre de G√®nes')
        ax.set_title('Impact Clinique des Mutations', 
                    fontsize=12, fontweight='bold')
        ax.grid(True, alpha=0.3, axis='y')
        
        # Rotation des labels x
        plt.setp(ax.get_xticklabels(), rotation=45, ha='right')
    
    def create_advanced_genomic_analysis(self, df):
        """Cr√©e une analyse g√©nomique avanc√©e"""
        fig = plt.figure(figsize=(18, 12))
        
        # 1. Heatmap des mutations
        ax1 = plt.subplot(2, 3, 1)
        self._plot_mutation_heatmap(df, ax1)
        
        # 2. Distribution des fr√©quences
        ax2 = plt.subplot(2, 3, 2)
        self._plot_frequency_distribution(df, ax2)
        
        # 3. R√©seau d'interaction des g√®nes
        ax3 = plt.subplot(2, 3, 3)
        self._plot_gene_interaction_network(ax3)
        
        # 4. Profil mutationnel
        ax4 = plt.subplot(2, 3, 4)
        self._plot_mutational_signature(ax4)
        
        # 5. Pathway analysis
        ax5 = plt.subplot(2, 3, 5)
        self._plot_pathway_analysis(df, ax5)
        
        # 6. CTAG detailed
        ax6 = plt.subplot(2, 3, 6)
        self._plot_detailed_ctag(ax6)
        
        plt.suptitle('Analyse G√©nomique Avanc√©e - Maladie de Parkinson', 
                    fontsize=16, fontweight='bold')
        plt.tight_layout()
        plt.savefig('advanced_parkinson_genomics.png', dpi=300, bbox_inches='tight')
        plt.show()
    
    def _plot_mutation_heatmap(self, df, ax):
        """Cr√©e une heatmap des mutations"""
        # Cr√©er une matrice simul√©e pour la heatmap
        genes = df['Gene'].tolist()
        mutation_types = df['Mutation_Type'].unique()
        
        # Matrice de fr√©quence simul√©e
        heatmap_data = np.random.rand(len(genes), len(mutation_types)) * 0.2
        
        # Renforcer certaines associations sp√©cifiques √† Parkinson
        for i, gene in enumerate(genes):
            if gene in ['SNCA', 'LRRK2']:
                heatmap_data[i, 0] = 0.8  # Forte association avec missense
            if gene == 'PARK2':
                heatmap_data[i, 1] = 0.7  # Forte association avec deletion
        
        sns.heatmap(heatmap_data, ax=ax, cmap='YlOrRd', 
                   xticklabels=mutation_types, yticklabels=genes,
                   cbar_kws={'label': 'Fr√©quence relative'})
        
        ax.set_title('Heatmap des Mutations\npar G√®ne et Type', fontsize=10, fontweight='bold')
        ax.tick_params(axis='x', rotation=45)
        ax.tick_params(axis='y', rotation=0)
    
    def _plot_frequency_distribution(self, df, ax):
        """Plot de la distribution des fr√©quences de mutations"""
        ax.hist(df['Mutation_Frequency']*100, bins=8, 
               color='#8B4513', alpha=0.7, edgecolor='black')  # Marron pour Parkinson
        
        ax.axvline(df['Mutation_Frequency'].mean()*100, color='red', 
                  linestyle='--', linewidth=2, label=f'Moyenne: {df["Mutation_Frequency"].mean()*100:.1f}%')
        
        ax.set_xlabel('Fr√©quence des Mutations (%)')
        ax.set_ylabel('Nombre de G√®nes')
        ax.set_title('Distribution des Fr√©quences de Mutations', 
                    fontsize=10, fontweight='bold')
        ax.legend()
        ax.grid(True, alpha=0.3)
    
    def _plot_gene_interaction_network(self, ax):
        """Cr√©e un r√©seau d'interaction des g√®nes Parkinson"""
        # Positions simul√©es pour le r√©seau
        nodes = {
            'SNCA': (3, 4), 'LRRK2': (5, 3), 'PARK2': (2, 2),
            'PINK1': (4, 1), 'DJ1': (1, 3), 'GBA': (5, 5),
            'VPS35': (3, 5), 'ATP13A2': (1, 1)
        }
        
        # Connexions simul√©es sp√©cifiques √† Parkinson
        edges = [('SNCA', 'LRRK2'), ('SNCA', 'PARK2'), ('PARK2', 'PINK1'),
                ('PINK1', 'DJ1'), ('LRRK2', 'GBA'), ('SNCA', 'VPS35'),
                ('PARK2', 'ATP13A2'), ('GBA', 'VPS35')]
        
        # Dessiner les ar√™tes
        for edge in edges:
            start = nodes[edge[0]]
            end = nodes[edge[1]]
            ax.plot([start[0], end[0]], [start[1], end[1]], 
                   'gray', alpha=0.6, linewidth=2)
        
        # Dessiner les n≈ìuds
        for gene, pos in nodes.items():
            color = '#8B4513' if gene in ['SNCA', 'LRRK2', 'PARK2'] else '#45B7D1'  # Marron pour g√®nes principaux
            ax.scatter(pos[0], pos[1], s=300, c=color, alpha=0.8, 
                      edgecolors='black', linewidth=2)
            ax.text(pos[0], pos[1], gene, ha='center', va='center', 
                   fontweight='bold', fontsize=8)
        
        ax.set_xlim(0, 6)
        ax.set_ylim(0, 6)
        ax.set_title('R√©seau d\'Interaction des G√®nes Parkinson', 
                    fontsize=10, fontweight='bold')
        ax.set_xticks([])
        ax.set_yticks([])
    
    def _plot_mutational_signature(self, ax):
        """Plot des signatures mutationnelles sp√©cifiques √† Parkinson"""
        # Signatures mutationnelles simul√©es pour Parkinson
        contexts = ['C>A', 'C>G', 'C>T', 'T>A', 'T>C', 'T>G']
        signature1 = [0.15, 0.08, 0.35, 0.12, 0.20, 0.10]  # Signature sporadique
        signature2 = [0.25, 0.12, 0.25, 0.15, 0.15, 0.08]   # Signature familiale
        
        x = np.arange(len(contexts))
        width = 0.35
        
        ax.bar(x - width/2, signature1, width, label='Signature Sporadique', 
               color='#8B4513', alpha=0.8)  # Marron
        ax.bar(x + width/2, signature2, width, label='Signature Familiale', 
               color='#D2691E', alpha=0.8)  # Marron clair
        
        ax.set_xlabel('Type de Mutation')
        ax.set_ylabel('Fr√©quence relative')
        ax.set_title('Signatures Mutationnelles Parkinson', fontsize=10, fontweight='bold')
        ax.set_xticks(x)
        ax.set_xticklabels(contexts)
        ax.legend()
        ax.grid(True, alpha=0.3, axis='y')
    
    def _plot_pathway_analysis(self, df, ax):
        """Analyse des voies de signalisation sp√©cifiques √† Parkinson"""
        pathways = {
            'Prot√©ostasie': ['SNCA', 'PARK2', 'UCHL1'],
            'Fonction Mitochondriale': ['PINK1', 'DJ1', 'ATP13A2'],
            'Trafic V√©siculaire': ['LRRK2', 'VPS35', 'DNAJC6'],
            'Lysosomal': ['GBA', 'ATP13A2']
        }
        
        pathway_counts = {pathway: len(genes) for pathway, genes in pathways.items()}
        
        colors = ['#8B4513', '#D2691E', '#A0522D', '#CD853F']  # Tons marron
        bars = ax.bar(pathway_counts.keys(), pathway_counts.values(), 
                     color=colors, alpha=0.8)
        
        for bar in bars:
            height = bar.get_height()
            ax.text(bar.get_x() + bar.get_width()/2, height + 0.1,
                   f'{height}', ha='center', va='bottom', fontweight='bold')
        
        ax.set_ylabel('Nombre de G√®nes')
        ax.set_title('Voies de Signalisation Parkinson', 
                    fontsize=10, fontweight='bold')
        ax.tick_params(axis='x', rotation=45)
        ax.grid(True, alpha=0.3, axis='y')
    
    def _plot_detailed_ctag(self, ax):
        """Diagramme CTAG d√©taill√© avec transitions/transversions"""
        # Donn√©es simul√©es pour les transitions/transversions (sp√©cifique Parkinson)
        mutation_types = ['C>T', 'C>G', 'C>A', 'T>C', 'T>G', 'T>A']
        counts = [120, 30, 40, 90, 25, 35]  # Comptes simul√©s pour Parkinson
        
        colors = ['#8B4513', '#D2691E', '#A0522D', '#CD853F', '#DEB887', '#F4A460']  # Tons marron
        bars = ax.bar(mutation_types, counts, color=colors, alpha=0.8)
        
        for bar in bars:
            height = bar.get_height()
            ax.text(bar.get_x() + bar.get_width()/2, height + 2,
                   f'{height}', ha='center', va='bottom', fontweight='bold')
        
        ax.set_ylabel('Nombre de Mutations')
        ax.set_title('Spectre des Mutations CTAG Parkinson', 
                    fontsize=10, fontweight='bold')
        ax.grid(True, alpha=0.3, axis='y')
    
    def _generate_genomic_report(self, df):
        """G√©n√®re un rapport d'analyse g√©nomique pour Parkinson"""
        print("\nüß¨ RAPPORT D'ANALYSE G√âNOMIQUE - MALADIE DE PARKINSON")
        print("=" * 60)
        
        # 1. G√®nes les plus fr√©quemment mut√©s
        print("\n1. üìä G√àNES LES PLUS MUT√âS:")
        top_genes = df.nlargest(5, 'Mutation_Frequency')
        for _, row in top_genes.iterrows():
            print(f"   ‚Ä¢ {row['Gene']}: {row['Mutation_Frequency']*100:.1f}% "
                  f"({row['Mutation_Type']}) - {row['Clinical_Significance']}")
        
        # 2. Analyse des g√®nes principaux
        print("\n2. üîç ANALYSE DES G√àNES PRINCIPAUX:")
        main_genes = df[df['Gene'].isin(['SNCA', 'LRRK2', 'PARK2', 'GBA'])]
        for _, row in main_genes.iterrows():
            print(f"   ‚Ä¢ {row['Gene']}: Fr√©quence {row['Mutation_Frequency']*100:.1f}% - {row['Clinical_Significance']}")
        
        # 3. Implications th√©rapeutiques
        print("\n3. üíä IMPLICATIONS TH√âRAPEUTIQUES:")
        print("   ‚Ä¢ Th√©rapies ciblant l'alpha-synucl√©ine: Pour mutations SNCA")
        print("   ‚Ä¢ Inhibiteurs de LRRK2: En d√©veloppement clinique")
        print("   ‚Ä¢ Th√©rapies enzymatiques: Pour mutations GBA")
        print("   ‚Ä¢ Antioxydants et protecteurs mitochondriaux")
        
        # 4. Recommandations de d√©pistage
        print("\n4. üéØ RECOMMANDATIONS DE D√âPISTAGE:")
        print("   ‚Ä¢ S√©quen√ßage panel Parkinson: SNCA, LRRK2, PARK2, GBA")
        print("   ‚Ä¢ Conseil g√©n√©tique: Pour formes familiales")
        print("   ‚Ä¢ Test GBA: Important pour la r√©ponse th√©rapeutique")
        
        # 5. Statistiques globales
        print("\n5. üìà STATISTIQUES GLOBALES:")
        print(f"   ‚Ä¢ Nombre total de g√®nes analys√©s: {len(df)}")
        print(f"   ‚Ä¢ Fr√©quence moyenne des mutations: {df['Mutation_Frequency'].mean()*100:.1f}%")
        print(f"   ‚Ä¢ G√®nes pathog√®nes: {len(df[df['Clinical_Significance'] == 'Pathogenic'])}")
        print(f"   ‚Ä¢ Facteurs de risque: {len(df[df['Clinical_Significance'] == 'Risk_Factor'])}")

def main():
    """Fonction principale"""
    print("üß¨ ANALYSE G√âNOMIQUE DE LA MALADIE DE PARKINSON - DIAGRAMME CTAG")
    print("=" * 60)
    
    # Initialiser l'analyseur
    analyzer = ParkinsonGenomeAnalyzer()
    
    # G√©n√©rer les donn√©es
    genomic_data = analyzer.generate_genomic_data()
    
    # Aper√ßu des donn√©es
    print("\nüëÄ Aper√ßu des donn√©es g√©nomiques:")
    print(genomic_data.head(8))
    
    # Cr√©er le diagramme CTAG principal
    print("\nüìä Cr√©ation du diagramme CTAG...")
    analyzer.create_ctag_diagram(genomic_data)
    
    # Cr√©er l'analyse avanc√©e
    print("\nüî¨ Cr√©ation de l'analyse g√©nomique avanc√©e...")
    analyzer.create_advanced_genomic_analysis(genomic_data)
    
    print("\n‚úÖ Analyse g√©nomique termin√©e!")
    print("üìÅ Fichiers g√©n√©r√©s:")
    print("   ‚Ä¢ parkinson_ctag_diagram.png")
    print("   ‚Ä¢ advanced_parkinson_genomics.png")

if __name__ == "__main__":
    main()